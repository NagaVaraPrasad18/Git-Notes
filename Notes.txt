mkdir name - create directory
cd name - To move into the directory
dir - To get list of files
dir /a - To get list of hidden files

git init - To create Git Respository
git branch name - To create a new branch
git branch -m name - To rename a branch
git branch - To get list of branches

git-repository is the Working directory and .git is the Git Repository

There are 4 Object types in Git -
1. Blob - Files
2. Tree - Folders/Directories
3. Commit - Pointers to Trees
	We can make many commits. Each commit is a snapshot of the project
4. Annotated Tag

Hash -
Every object type has a specific hash (HexaDecimal). It is a unique identifier to every object in git. It is created using Hash Function (SHA1). A fixed length Hash will be generated from any variable length input.
SHA1 - 160bits (40 hexaDecimal characters)

echo First > First.txt :
echo Content File_Name.txt - To create a file with Content

echo "Next Line" >> First.txt - To add the given text in the next line.

cat First.txt:
cat File_Name.txt - To read contents of the file

In git, there are 3 areas where files are located - Working Dir, Staging area and Git repo

1. Working Dir - This is where our files/folders are present

2. Git repo - In this by default there are few folders present - info, pack (dir .git/objects)
    - In objects folder, after commiting and merging folders will be created.
Ex: 9b
- In this folder hash will be stored
- dir .git/objects/9b will return file with hash name (incomplete)
- If we combine folder name (9b) and file name (4b0276f15c84b3e9a3563945d029badf961cf9), then we get sha1 hash. 
- To check what type of file this is we use the command - git cat-file -t 9b4b0276f15c84b3e9a3563945d029badf961cf9. Then we get - tree.
- git cat-file -p hash (To read the contents of the git object)

3. Staging area - Intermediate area between Working dir and Git repo. First files are moved into Staging area before moving into Git repo. Before files are copied into Working dir from Git repo, it is first moved into Staging area.

- To move files from Working dir to Staging area, we use the command: git add
Ex: git add .
- git add command marks files to be committed.

To stage single file - git add File.txt
To stage multiple files - git add File1.txt File2.txt
To stage all modified files - git add .

- Next, git commit command is used to move files from Staging area to Git repo, these files created in .git/objects folder.
- Commit means implying there is a new version of the file or folders.
- git commit creates a commit object which has info like Author name, email, date, message, etc.
- To checkout, we use git checkout command. We can go to different versions of our commits using this. Here the files are copied into the Working directory via Staging area.

To remove one or more files from staging area - git reset file.txt
Ex: git reset First.txt

git status - To check the status 

When changes are committed, git automatically adds info about Author name and email, description which is stored in commit object

Every commit points to parent and each commit may have more than 1 parent

Configuring Git Author and Email -
- git config --global user.name name
- git config --global user.email email

- git config --list (To check what is the git configuration)

q <Enter> - To exit

Commit - Set of saved repository changes
	Has hash key

To commit changes - 
- git commit -m "Message / Description"
For every commit, message should be included

To move changed files into staging area and commit simultaneously -
- git commit -a-m "Add and Commit"
Here, -a stands for adding all modified files to staging area.

- git log (To check the history of commits)
- git log --graph (To check the history of commits with a graph visualising commits and its parents. It is graphical representation of commits tree.

HEAD is a dynamic pointer and it represents the current location

git automatically moves the current branch pointer to the last commit

HEAD points to branch (main) and  branch points to the last commit

Checkout -
- git checkout sha
Ex: git checkout 89ad57383a3faad69cc3d19d0a3c24e7ae830fc6

When we checkout, the HEAD will point to this commit. Here the head is in Detached HEAD state which is HEAD pointing to a commit instead of the branch. When we checkout, the state of the repository is changed

To checkout to a specific branch -
- git checkout branch
Ex: git checkout main

File Tracking Statuses -
1. Untracked - The files which are changed but not moved to staging area
2. Unmodifies - The files which are committed and not edited.
3. Modified - The files which are changed after committing.
4. Staged - 

Branches and Merging:
- First commit is Root commit
- There will be more than 1 branches in git repositories. These are feature branches, typically used to test a feature.
- These feature branches are created from main branches at a point in time.
- Every feature branch may be created at different point in time (different commits). Eventually these feature branches should be merged with the "main" branch.

Merging:
- Create a new feature branch from main branch
- Make changes in the feature branch and commmit
- Checkout main branch (receiving branch)
- Merge feature branch to the receiving branch (main)
	git merge feature-branch
After this merge command, a text editor will popup, edit message text there

To Delete a branch:
- git branch -d name
Ex: git branch -d feature1

Reading contents of the HEAD folder -
cat .git/HEAD (HEAD points to a specific branch)
All branches are present in the refs folder in .git
All versions of the files are stored in objects folder

- git name -h
This command shows all the available commands related to the name.

- git show hash
Ex: git show 5645013dab377ae5e2416b9a647a66ac3474673e
This command shows info regarding a particular commit. Here, all the changes that took place in the commit is displayed including name changes and new file creation.

- git show --name-only hash
Ex: git show --name-only 5645013dab377ae5e2416b9a647a66ac3474673e
This command will show only the file names.

- git reflog
This command shows all the info about the changes in the project including all the commits on all the branches.